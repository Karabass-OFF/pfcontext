#!/bin/sh
#
# ContextOnly script for pfSense
#
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/bin
LOG="/var/log/context.log"
#LOG="/dev/null" # Uncomment for disable logging
CONTEXT_MOUNT="/mnt/context"
PID="/etc/context.d/net.pid"
CONTEXT_DEV="/dev/cd0"
CONTEXT_FILE="$CONTEXT_MOUNT/context.sh"
xml_file="/cf/conf/config.xml"
backup_xml_file="/cf/conf/backup/config.xml.$(date +%Y.%m.%d.%H:%M:%S)"
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
# shellcheck disable=SC1091
. "$SCRIPT_DIR/modules/interfaces.sh"
# shellcheck disable=SC1091
. "$SCRIPT_DIR/modules/network.sh"
# shellcheck disable=SC1091
. "$SCRIPT_DIR/modules/firewall.sh"

echo "$(date) [context] === START ContextOnly $(date) ===" >> "$LOG"
# Монтируем CD-ROM, если он еще не смонтирован
mkdir -p "$CONTEXT_MOUNT"
if ! mount | grep -q "on $CONTEXT_MOUNT "; then
    mount -t cd9660 "$CONTEXT_DEV" "$CONTEXT_MOUNT" >> "$LOG" 2>&1
fi
# Проверяем наличие файла context.sh на CD-ROM
if [ -f "$CONTEXT_FILE" ]; then
    echo "$(date) [context] Found $CONTEXT_FILE — sourcing" >> "$LOG"
    # shellcheck source=/dev/null
    . "$CONTEXT_FILE"
    cp "$xml_file" "$backup_xml_file" # Создаем резервную копию config.xml
    get_ctx_var() {
        idx="$1"
        suffix="$2"
        val=""
        eval "val=\${ETH${idx}_${suffix}:-}"
        if [ -z "${val:-}" ]; then
            eval "val=\${ETHERNET${idx}_${suffix}:-}"
        fi
        printf '%s' "${val:-}"
    }
    # Проверяем текущий шлюз по умолчанию и меняем его, только если он не совпадает с нужным и выключен BGP
    current_gw=$(netstat -rn | awk '/^0.0.0.0/ {print $2; exit}')    
else
    echo "$(date) [context] $CONTEXT_FILE not found, exiting" >> "$LOG"
    exit 0
fi
# --- ОСНОВНЫЕ ФУНКЦИИ ------------------------------------------------------
# Настройка интерфейсов по MAC-адресам
configure_interfaces_by_mac "$xml_file" "$backup_xml_file"
# Применение настроек DNS
apply_dns_settings "$backup_xml_file" "$LOG"
# Применение настроек hostname
apply_hostname_setting "$backup_xml_file" "$LOG"
# --- Password override logic ---
if [ -n "${PASSWORD_ROOT}" ]; then
    PASSWORD="${PASSWORD_ROOT}"
    echo "$(date) [context] PASSWORD_ROOT detected → override PASSWORD" >> "$LOG"
fi
# Пароль admin (через playback)
old_hash=$(xml sel -t -m "//user[name='admin']" -v "bcrypt-hash" -n "$backup_xml_file")
if php -r "exit(password_verify('${PASSWORD:-}', '$old_hash') ? 0 : 1);"; then
    echo "$(date) [context] Admin password unchanged" >> "$LOG"
else
     if pfSsh.php playback ChangePassTool admin "${PASSWORD:-}" >> "$LOG" 2>&1; then
        echo "$(date) [context] Admin password changed" >> "$LOG"
        new_hash=$(xml sel -t -m "//user[name='admin']" -v "bcrypt-hash" -n "$xml_file" 2>/dev/null || true)
        if [ -n "$new_hash" ]; then
            xml ed -L -u "//user[name='admin']/bcrypt-hash" -v "$new_hash" "$backup_xml_file"
            echo "$(date) [context] Synced admin bcrypt-hash into backup XML" >> "$LOG"
        else
            echo "$(date) [context] Warning: unable to read new admin bcrypt-hash for backup XML sync" >> "$LOG"
        fi
    else
        echo "$(date) [context] ERROR: failed to change admin password via ChangePassTool" >> "$LOG"
    fi
fi

# Проверка изменений в разделе interfaces и установка флага перезагрузки интерфейсов
update_interface_reload_flag "$xml_file" "$backup_xml_file" "$LOG"
# Определение WAN-сети и шлюза
detect_wan_network "$LOG"
# Применение шлюза WAN, если он отличается от текущего
apply_wan_gateway "$xml_file" "$backup_xml_file" "$LOG" "$current_gw" "$WAN_GATEWAY" "$WAN_NETWORK"
# Применение фильтров WAN
handle_bgp_default_route "$backup_xml_file" "$LOG" "$WAN_GATEWAY"
apply_wan_filters "$backup_xml_file" "$LOG" "$WAN_NETWORK"

# Синхронизация config.xml (если есть изменения)
if diff -I '<bcrypt-hash>.*</bcrypt-hash>' -q "$xml_file" "$backup_xml_file" >/dev/null; then
    rm -f "$backup_xml_file"
    echo "$(date) [context] No changes in config.xml, backup_xml_file removed" >> "$LOG"
elif [ -s "$backup_xml_file" ]; then # Если файл не пустой, копируем его в config.xml
    cp "$backup_xml_file" "$xml_file"
    echo "$(date) [context] config.xml updated, backup_xml_file saved to $backup_xml_file" >> "$LOG"
fi
# Перезагрузка служб pfSense (если указано в контексте)
if [ "${RC_RELOAD_ALL}" = "on" ]; then
    # Перезагружаем службы pfSense
   {    /etc/rc.reload_all start
        echo "$(date) [context] pfSense services reloaded"
        pfSsh.php playback restartallwan
        echo "$(date) [context] pfSense services restarted"
    } >>"$LOG" 2>&1
fi

# Отмонтировать диск после выполнения всех операций
if mount | grep -q "on $CONTEXT_MOUNT "; then
    umount "$CONTEXT_MOUNT" && echo "$(date) [context] Unmounted $CONTEXT_MOUNT" >> "$LOG"
else
    echo "$(date) [context] $CONTEXT_MOUNT already unmounted" >> "$LOG"
fi
# --- ДОПОЛНИТЕЛЬНЫЕ МОДУЛИ ------------------------------------------------


# BGP-модуль 
if [ -x /etc/context.d/bgp ]; then
    echo "$(date) [context] Running BGP module /etc/context.d/bgp" >> "$LOG"
     # shellcheck disable=SC1091
    . /etc/context.d/bgp
    echo "$(date) [context] BGP module (return $?)" >> "$LOG"
fi

restart_interfaces_if_requested "$LOG" "$PID"
apply_pfctl_state "$LOG"

# SSH ключ (если указана переменная SSH_PUBLIC_KEY)
if [ -n "${SSH_PUBLIC_KEY:-}" ]; then
    mkdir -p /root/.ssh
    if [ ! -f /root/.ssh/authorized_keys ] || ! grep -Fxq "$SSH_PUBLIC_KEY" /root/.ssh/authorized_keys; then
        # кодируем ключ в base64 (без переносов строк)
        ENC_KEY=$(printf '%s' "$SSH_PUBLIC_KEY" | base64 | tr -d '\n')
        if xml sel -t -v "//user[name='admin']/authorizedkeys" "$xml_file" >/dev/null 2>&1; then
            xml ed -L -u "//user[name='admin']/authorizedkeys" -v "$ENC_KEY" "$xml_file"
        else
            xml ed -L -s "//user[name='admin']" -t elem -n "authorizedkeys" -v "$ENC_KEY" "$xml_file"
        fi
        echo "$(date) [context] SSH public key updated in config.xml" >> "$LOG"
        echo "$SSH_PUBLIC_KEY" >> /root/.ssh/authorized_keys
        chmod 600 /root/.ssh/authorized_keys
        chmod 700 /root/.ssh
        echo "$(date) [context] SSH public key updated" >> "$LOG"
        #RC_RELOAD_ALL="on" && echo "$(date) [context] RC_RELOAD_ALL set to on due to SSH key change" >> "$LOG"
    fi
fi
# Модуль управления management-интерфейсом
MGMT_MODULE="/etc/context.d/modules/mgmt.sh"
if [ -x "$MGMT_MODULE" ] && [ -n "${MGMT_ENABLE:-}" ]; then
    echo "$(date) [context] Running MGMT module $MGMT_MODULE (MGMT_ENABLE=${MGMT_ENABLE})" >> "$LOG"
    export MGMT_ENABLE MGMT_IF MGMT_PORT
    "$MGMT_MODULE" >>"$LOG" 2>&1
    status=$?
    if [ $status -eq 0 ]; then
        echo "$(date) [context] MGMT module finished successfully" >> "$LOG"
    else
        echo "$(date) [context] MGMT module failed (exit $status)" >> "$LOG"
    fi
fi
rm -f "$PID" # Удаляем PID файл, если он есть
echo "$(date) [context] FINISH" >> "$LOG"
