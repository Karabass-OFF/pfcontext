set hostid 0x150a5ee5
set state-policy if-bound
set limit table-entries 400000
set optimization normal
set limit states 403000
set limit src-nodes 403000

#System aliases
loopback = "{ lo0 }"
WAN = "{ vtnet0 }"
table <WAN__NETWORK> persist { 91.185.11.168/29 }
WAN__NETWORK = "<WAN__NETWORK>"
LAN = "{ vtnet1 }"
table <LAN__NETWORK> persist { 10.11.11.0/24 }
LAN__NETWORK = "<LAN__NETWORK>"
OPT1 = "{ vtnet2 }"
table <OPT1__NETWORK> persist { 10.11.11.0/24 }
OPT1__NETWORK = "<OPT1__NETWORK>"
table <bogons> persist file "/etc/bogons"
bogons = "<bogons>"
table <bogons> persist file "/etc/bogons"
bogons = "<bogons>"

#SSH Lockout Table
table <sshguard> persist
#Snort tables
table <snort2c>
table <virusprot>
table <_loopback4_> {   127.0.0.0/8 } 
_loopback4_ = "<_loopback4_>"
table <_loopback6_> {   ::1/128 } 
_loopback6_ = "<_loopback6_>"
table <_loopback46_> {    127.0.0.0/8   ::1/128 } 
_loopback46_ = "<_loopback46_>"
table <_linklocal4_> {   169.254.0.0/16 } 
_linklocal4_ = "<_linklocal4_>"
table <_linklocal6_> {   fe80::/10 } 
_linklocal6_ = "<_linklocal6_>"
table <_linklocal46_> {    169.254.0.0/16   fe80::/10 } 
_linklocal46_ = "<_linklocal46_>"
table <_private4_> {   10.0.0.0/8  172.16.0.0/12  192.168.0.0/16 } 
_private4_ = "<_private4_>"
table <_private6_> {   fc00::/7 } 
_private6_ = "<_private6_>"
table <_private46_> {    10.0.0.0/8  172.16.0.0/12  192.168.0.0/16   fc00::/7 } 
_private46_ = "<_private46_>"
table <_multicast4_> {   224.0.0.0/4 } 
_multicast4_ = "<_multicast4_>"
table <_multicast6_> {   ff00::/8 } 
_multicast6_ = "<_multicast6_>"
table <_multicast46_> {    224.0.0.0/4   ff00::/8 } 
_multicast46_ = "<_multicast46_>"
table <_reserved4_> {   0.0.0.0/8  10.0.0.0/8  100.64.0.0/10  127.0.0.0/8  169.254.0.0/16  172.16.0.0/12  192.0.0.0/24  192.0.2.0/24  192.88.99.0/24  192.168.0.0/16  198.18.0.0/15  198.51.100.0/24  203.0.113.0/24  224.0.0.0/4  240.0.0.0/4  255.255.255.255/32 } 
_reserved4_ = "<_reserved4_>"
table <_reserved6_> {   ::1/128  ::/128  ::ffff:0:0/96  64:ff9b::/96  64:ff9b:1::/48  100::/64  2001::/23  2001:2::/48  2001:db8::/32  2002::/16  3fff::/20  5f00::/16  fc00::/7  fe80::/10  ff00::/8 } 
_reserved6_ = "<_reserved6_>"
table <_reserved46_> {    0.0.0.0/8  10.0.0.0/8  100.64.0.0/10  127.0.0.0/8  169.254.0.0/16  172.16.0.0/12  192.0.0.0/24  192.0.2.0/24  192.88.99.0/24  192.168.0.0/16  198.18.0.0/15  198.51.100.0/24  203.0.113.0/24  224.0.0.0/4  240.0.0.0/4  255.255.255.255/32   ::1/128  ::/128  ::ffff:0:0/96  64:ff9b::/96  64:ff9b:1::/48  100::/64  2001::/23  2001:2::/48  2001:db8::/32  2002::/16  3fff::/20  5f00::/16  fc00::/7  fe80::/10  ff00::/8 } 
_reserved46_ = "<_reserved46_>"

# User Aliases 
 
# Gateways

 
set loginterface vtnet1

set skip on pfsync0
set keepcounters


scrub from any to <vpn_networks>   fragment no reassemble
scrub from <vpn_networks> to any   fragment no reassemble
scrub on $WAN inet all    fragment reassemble
scrub on $WAN inet6 all    fragment reassemble
scrub on $LAN inet all    fragment reassemble
scrub on $LAN inet6 all    fragment reassemble
scrub on $OPT1 inet all    fragment reassemble
scrub on $OPT1 inet6 all    fragment reassemble


no nat proto carp
no rdr proto carp
nat-anchor "natearly/*"
nat-anchor "natrules/*"


# Outbound NAT rules (automatic)

# Subnets to NAT 
table <tonatsubnets> { 127.0.0.0/8 ::1/128 91.185.11.168/29 10.11.11.0/24 10.11.11.0/24 }
# TFTP proxy
rdr-anchor "tftp-proxy/*"
# NAT Inbound Redirects

anchor "openvpn/*"
anchor "ipsec/*"
# block IPv4 link-local. Per RFC 3927, link local "MUST NOT" be forwarded by a routing device,
# and clients "MUST NOT" send such packets to a router. FreeBSD won't route 169.254./16, but
# route-to can override that, causing problems such as in redmine #2073
block in log quick from 169.254.0.0/16 to any ridentifier 1000000101 label "Block IPv4 link-local"
block in log quick from any to 169.254.0.0/16 ridentifier 1000000102 label "Block IPv4 link-local"
#---------------------------------------------------------------------------
# default deny rules
#---------------------------------------------------------------------------
block in log inet all ridentifier 1000000103 label "Default deny rule IPv4"
block out log inet all ridentifier 1000000104 label "Default deny rule IPv4"
block in log inet6 all ridentifier 1000000105 label "Default deny rule IPv6"
block out log inet6 all ridentifier 1000000106 label "Default deny rule IPv6"

# IPv6 ICMP is not auxiliary, it is required for operation
# See man icmp6(4)
# 1    unreach         Destination unreachable
# 2    toobig          Packet too big
# 128  echoreq         Echo service request
# 129  echorep         Echo service reply
# 133  routersol       Router solicitation
# 134  routeradv       Router advertisement
# 135  neighbrsol      Neighbor solicitation
# 136  neighbradv      Neighbor advertisement
pass  quick inet6 proto ipv6-icmp from any to any icmp6-type {1,2,135,136} ridentifier 1000000107 keep state

# Allow only bare essential icmpv6 packets (NS, NA, and RA, echoreq, echorep)
pass out  quick inet6 proto ipv6-icmp from fe80::/10 to fe80::/10 icmp6-type {129,133,134,135,136} ridentifier 1000000108 keep state
pass out  quick inet6 proto ipv6-icmp from fe80::/10 to ff02::/16 icmp6-type {129,133,134,135,136} ridentifier 1000000109 keep state
pass in  quick inet6 proto ipv6-icmp from fe80::/10 to fe80::/10 icmp6-type {128,133,134,135,136} ridentifier 1000000110 keep state
pass in  quick inet6 proto ipv6-icmp from ff02::/16 to fe80::/10 icmp6-type {128,133,134,135,136} ridentifier 1000000111 keep state
pass in  quick inet6 proto ipv6-icmp from fe80::/10 to ff02::/16 icmp6-type {128,133,134,135,136} ridentifier 1000000112 keep state
pass in  quick inet6 proto ipv6-icmp from :: to ff02::/16 icmp6-type {128,133,134,135,136} ridentifier 1000000113 keep state
# We use the mighty pf, we cannot be fooled.
block log quick inet proto { tcp, udp } from any port = 0 to any ridentifier 1000000114 label "Block traffic from port 0"
block log quick inet proto { tcp, udp } from any to any port = 0 ridentifier 1000000115 label "Block traffic to port 0"
block log quick inet6 proto { tcp, udp } from any port = 0 to any ridentifier 1000000116 label "Block traffic from port 0"
block log quick inet6 proto { tcp, udp } from any to any port = 0 ridentifier 1000000117 label "Block traffic to port 0"

# Snort package
block log quick from <snort2c> to any ridentifier 1000000118 label "Block snort2c hosts"
block log quick from any to <snort2c> ridentifier 1000000119 label "Block snort2c hosts"

# SSH lockout
block in log quick proto tcp from <sshguard> to (self) port 22 ridentifier 1000000301 label "sshguard"

# webConfigurator lockout
block in log quick proto tcp from <sshguard> to (self) port 443 ridentifier 1000000351 label "GUI Lockout"
block in log quick from <virusprot> to any ridentifier 1000000400 label "virusprot overload table"
block out quick proto udp from any port = 67 to any port = 68 tagged "dhcpin" ridentifier 1000000451 label "Prevent routing dhcp responses"
antispoof log for $WAN ridentifier 1000001470
antispoof log for $LAN ridentifier 1000002520
# allow access to DHCPv6 server on LAN
pass  quick on $LAN inet6 proto udp from fe80::/10 to fe80::/10 port = 546 ridentifier 1000002551 label "allow access to DHCPv6 server"
pass  quick on $LAN inet6 proto udp from fe80::/10 to ff02::/16 port = 546 ridentifier 1000002552 label "allow access to DHCPv6 server"
pass  quick on $LAN inet6 proto udp from fe80::/10 to ff02::/16 port = 547 ridentifier 1000002553 label "allow access to DHCPv6 server"
pass  quick on $LAN inet6 proto udp from ff02::/16 to fe80::/10 port = 547 ridentifier 1000002554 label "allow access to DHCPv6 server"
antispoof log for $OPT1 ridentifier 1000003570

# loopback
pass in  on $loopback inet all ridentifier 1000003611 label "pass IPv4 loopback"
pass out  on $loopback inet all ridentifier 1000003612 label "pass IPv4 loopback"
pass in  on $loopback inet6 all ridentifier 1000003613 label "pass IPv6 loopback"
pass out  on $loopback inet6 all ridentifier 1000003614 label "pass IPv6 loopback"
# let out anything from the firewall host itself and decrypted IPsec traffic
pass out  inet all keep state allow-opts ridentifier 1000003615 label "let out anything IPv4 from firewall host itself"
pass out  inet6 all keep state allow-opts ridentifier 1000003616 label "let out anything IPv6 from firewall host itself"

# make sure the user cannot lock himself out of the webConfigurator or SSH
pass in  quick on vtnet1 proto tcp from any to (vtnet1) port { 443 80 22 } ridentifier 10001 keep state label "anti-lockout rule"

# User-defined rules follow

anchor "userrules/*"
# source address is empty. label "USER_RULE: [CTX-MGMT] Allow WAN management TCP port 443"
# source address is empty. label "USER_RULE: [CTX-MGMT] Allow WAN management TCP port 80"
# source address is empty. label "USER_RULE: [CTX-MGMT] Allow WAN management TCP port 22"
# source address is empty. label "USER_RULE: [CTX-MGMT] Block WAN outbound IPv4"
# source address is empty. label "USER_RULE: [CTX-MGMT] Block WAN outbound IPv6"
pass  in  quick  on $LAN inet from any to any ridentifier 1760099891 keep state label "USER_RULE" label "id:1760099891"
pass  in  quick  on $LAN inet from $LAN__NETWORK to any ridentifier 0100000101 keep state label "USER_RULE: Default allow LAN to any rule" label "id:0100000101"
# source address is empty. label "USER_RULE: Default allow LAN IPv6 to any rule"

# VPN Rules

anchor "tftp-proxy/*"

